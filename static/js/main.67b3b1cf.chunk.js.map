{"version":3,"sources":["components/SSInput.js","components/SSList.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["SSInput","state","value","handleChange","event","setState","target","handleClick","input","props","handleAddSanta","className","id","type","placeholder","this","onChange","onClick","React","Component","SSList","santas","num","length","name","reveal","scope","map","row","key","Nav","src","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAyBeA,E,2MAtBXC,MAAQ,CACJC,MAAO,I,EAEXC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACH,MAAOE,EAAME,OAAOJ,S,EAEvCK,YAAc,SAACC,GACX,EAAKC,MAAMC,eAAeF,GAC1B,EAAKH,SAAS,CAACH,MAAO,M,wEAEhB,IAAD,OACL,OACI,yBAAKS,UAAU,oBACX,2BAAOC,GAAG,OAAOC,KAAK,OAAOF,UAAU,eAAeG,YAAY,wCAAwCZ,MAAOa,KAAKd,MAAMC,MAAOc,SAAUD,KAAKZ,eAClJ,yBAAKQ,UAAU,sBACX,4BAAQA,UAAU,kBAAkBE,KAAK,SAASD,GAAG,gBAAgBK,QAAS,kBAAM,EAAKV,YAAY,EAAKN,MAAMC,SAAhH,W,GAhBEgB,IAAMC,WCiDbC,E,2MA/CXnB,MAAQ,CACJoB,OAAQ,I,EAGZX,eAAiB,SAACF,GACd,EAAKH,SAAS,CACVgB,OAAO,GAAD,mBACC,EAAKpB,MAAMoB,QADZ,CAEF,CAAEC,IAAK,EAAKrB,MAAMoB,OAAOE,OAAS,EAAGC,KAAMhB,EAAOiB,QAAQ,KAE9DvB,MAAO,M,wEAIX,OACI,yBAAKS,UAAU,aACX,6BACA,kBAAC,EAAD,CAASD,eAAgBK,KAAKL,iBAC9B,2BAAOC,UAAU,iDACb,2BAAOA,UAAU,cACb,4BACI,wBAAIe,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGR,+BAGQX,KAAKd,MAAMoB,OAAOM,KAAI,SAACC,GACnB,OACI,wBAAIC,IAAKD,EAAIN,KACT,wBAAII,MAAM,OAAOE,EAAIN,KACrB,4BAAKM,EAAIJ,MACT,4BAAI,4BAAQX,KAAK,SAASF,UAAU,sCAAhC,sB,GAnCvBO,IAAMC,WCOZW,MARf,WACI,OACI,yBAAKnB,UAAU,8DACX,yBAAKoB,IAAI,qFAAqFC,OAAO,SCSlGC,MATf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.67b3b1cf.chunk.js","sourcesContent":["import React from 'react';\n\nclass SSInput extends React.Component {\n    state = {\n        value: \"\"\n    }\n    handleChange = (event) => {\n        this.setState({value: event.target.value});\n    }\n    handleClick = (input) => {\n        this.props.handleAddSanta(input);\n        this.setState({value: \"\"})\n    }\n    render() {\n        return (\n            <div className=\"input-group mb-3\">\n                <input id=\"ssIn\" type=\"text\" className=\"form-control\" placeholder=\"Enter Participant for Secret Santa...\" value={this.state.value} onChange={this.handleChange}/>\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-success\" type=\"button\" id=\"button-addon2\" onClick={() => this.handleClick(this.state.value)}>+</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SSInput;","import React from 'react';\nimport SSInput from './SSInput'\n\nclass SSList extends React.Component {\n    state = {\n        santas: [],\n    }\n    \n    handleAddSanta = (input) => {\n        this.setState({\n            santas: [\n                ...this.state.santas,\n                { num: this.state.santas.length + 1, name: input, reveal: false }\n            ],\n            value: \"\"\n        })\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <br />\n                <SSInput handleAddSanta={this.handleAddSanta}/>\n                <table className=\"table table-striped table-bordered table-dark\">\n                    <thead className=\"bg-success\">\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Secret</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n\n                            this.state.santas.map((row) => {\n                                return (\n                                    <tr key={row.num}>\n                                        <th scope=\"row\">{row.num}</th>\n                                        <td>{row.name}</td>\n                                        <td><button type=\"button\" className=\"btn btn-success float-right btn-sm\">Reveal</button></td>\n                                    </tr>\n                                )\n                            })\n\n                        }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default SSList;","import React from 'react';\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar text-white bg-success d-flex justify-content-center\">\n            <img src=\"https://test.ialottery.com/images/Promotions/SecretSanta/SecretSantaLogo_300px.png\" height=\"60\"/>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport SSList from './components/SSList'\nimport Nav from './components/Nav'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <SSList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}